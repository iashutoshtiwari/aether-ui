name: Storybook Tests

on:
  deployment_status:
    environments:
      - 'Preview - gp-styleguide'
      - 'Production - gp-styleguide'
      
  schedule:
  # Run at midnight PST (8 AM UTC)
  - cron: '0 8 * * *'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install dependencies
        run: npm install

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Link Vercel Project
        run: |
          vercel link --token ${{ secrets.VERCEL_TOKEN }} --yes --project gp-styleguide --scope good-party

      - name: Capture Deployment URL
        run: |
          # Get the Vercel preview URL directly from the deployment status
          DEPLOYMENT_URL="${{ github.event.deployment_status.target_url }}"
          
          echo "Using deployment URL: $DEPLOYMENT_URL"
          echo "BASE_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"

      # Get preview token for authentication
      - name: Get Preview Token
        run: |
          # Get deployment token
          TOKEN=$(vercel --token ${{ secrets.VERCEL_TOKEN }} deployment ls --scope good-party | grep ${{ env.BASE_URL }} | awk '{print $2}')
          echo "Using deployment token: $TOKEN"
          echo "PREVIEW_TOKEN=$TOKEN" >> "$GITHUB_ENV"

      - name: Run Storybook tests
        id: storybook-test
        run: |
          # Create the headers with proper JSON escaping
          HEADERS="{\"x-vercel-protection-bypass\":\"${{ secrets.VERCEL_PROTECTION_BYPASS }}\",\"x-vercel-set-bypass-cookie\":\"true\"}"
          
          # Check if we can access the URL without hitting login page
          echo "Testing URL accessibility with bypass headers..."
          echo "First trying without following redirects:"
          curl -v \
            -H "x-vercel-protection-bypass: ${{ secrets.VERCEL_PROTECTION_BYPASS }}" \
            -H "x-vercel-set-bypass-cookie: true" \
            -H "Cookie: _vercel_jwt=${{ env.PREVIEW_TOKEN }}" \
            ${{ env.BASE_URL }}
            
          echo "\nNow trying with limited redirects:"
          curl -v -L --max-redirs 5 \
            -H "x-vercel-protection-bypass: ${{ secrets.VERCEL_PROTECTION_BYPASS }}" \
            -H "x-vercel-set-bypass-cookie: true" \
            -H "Cookie: _vercel_jwt=${{ env.PREVIEW_TOKEN }}" \
            -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
            -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
            ${{ env.BASE_URL }}
            
          RESPONSE_CODE=$(curl --max-redirs 5 -L -s -o /dev/null -w "%{http_code}" \
            -H "x-vercel-protection-bypass: ${{ secrets.VERCEL_PROTECTION_BYPASS }}" \
            -H "x-vercel-set-bypass-cookie: true" \
            -H "Cookie: _vercel_jwt=${{ env.PREVIEW_TOKEN }}" \
            -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
            -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
            ${{ env.BASE_URL }})
          
          if [ "$RESPONSE_CODE" = "200" ]; then
            echo "‚úÖ URL is accessible (HTTP 200)"
          else
            echo "‚ùå URL returned HTTP $RESPONSE_CODE"
            echo "Final URL and headers:"
            curl -sIL --max-redirs 5 \
              -H "x-vercel-protection-bypass: ${{ secrets.VERCEL_PROTECTION_BYPASS }}" \
              -H "x-vercel-set-bypass-cookie: true" \
              -H "Cookie: _vercel_jwt=${{ env.PREVIEW_TOKEN }}" \
              -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
              -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
              -w "\nFinal URL: %{url_effective}\n" \
              ${{ env.BASE_URL }}
            exit 1
          fi
          
          export STORYBOOK_TEST_HEADERS="$HEADERS"
          
          # Add a small delay to ensure full initialization
          sleep 10
          
          # Run the test with the bypass headers
          if npx concurrently \
            "npx http-server -p 8080" \
            "npx wait-on http://localhost:8080 && npm run test-storybook -- --url ${{ env.BASE_URL }}"; then
            echo "test_outcome=success" >> "$GITHUB_OUTPUT"
          else
            echo "test_outcome=failure" >> "$GITHUB_OUTPUT"
          fi
        continue-on-error: true

      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "*Storybook Test Results* üìö\n*Repository:* ${{ github.repository }}\n*Environment:* ${{ github.event.deployment_status.environment || 'Scheduled Run' }}\n*Status:* ${{ steps.storybook-test.outputs.test_outcome == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}\n*Deployment URL:* ${{ env.BASE_URL || 'N/A' }}",
              "attachments": [{
                "color": "${{ steps.storybook-test.outputs.test_outcome == 'success' && 'good' || 'danger' }}"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 